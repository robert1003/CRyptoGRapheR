Maximize c^T x subject to Ax ≤ b, x ≥ 0;
with the corresponding symmetric dual problem,
Minimize b^T y subject to A^T y ≥ c, y ≥ 0.

Maximize c^T x subject to Ax ≤ b;
with the corresponding asymmetric dual problem,
Minimize b^T y subject to A^T y = c, y ≥ 0. 

Maximize \sum x subject to x_i + x_j ≤ Aij, x ≥ 0;
=> Maximize \sum x subject to x_i + x_j ≤ A_ij;
=> Minimize A^T y = \sum A_ij y_ij subject to for all v, \sum_{i=v or j=v} y_ij = 1, y_ij ≥ 0
=> possible optimal solution: y_ij = {0, 0.5, 1}
=> y'=2y: \sum_{i=v or j=v} y'_ij = 2, y'_ij = {0, 1, 2}
=> Minimum Bipartite perfect matching/2 (V1=X,V2=X,E=A)

General Graph:
|Max Ind. Set| + |Min Vertex Cover| = |V|
|Max Ind. Edge Set| + |Min Edge Cover| = |V|
Bipartite Graph:
|Max Ind. Set| = |Min Edge Cover|
|Max Ind. Edge Set| = |Min Vertex Cover|

To reconstruct the minimum vertex cover, dfs from each
unmatched vertex on the left side and with unused edges
only. Equivalently, dfs from source with unused edges
only and without visiting sink. Then, a vertex is
chosen iff. it is on the left side and without visited
or on the right side and visited through dfs.

Minimum Weighted Bipartite Edge Cover:
Construct new bipartite graph with n+m vertices on each side:
for each vertex u, duplicate a vertex u' on the other side
for each edge (u,v,w), add edges (u,v,w) and (v',u',w)
for each vertex u, add edge (u,u',2w) where w is min edge connects to u
then the answer is the minimum perfect matching of the new graph (KM)

Maximum density subgraph ( \sum{W_e}+ \sum{W_v} ) / |V|
Binary search on answer:
For a fixed D, construct a Max flow model as follow:
Let S be Sum of all weight( or inf)
1. from source to each node with cap = S
2. For each (u,v,w) in E, (u->v,cap=w), (v->u,cap=w)
3. For each node v, from v to sink with cap = S + 2 * D - deg[v] - 2 * (W of v)
where deg[v] = \sum weight of edge associated with v
If maxflow < S * |V|, D is an answer.

Requiring subgraph: all vertex can be reached from source with
edge whose cap > 0.

Maximum closed subgraph
1. connect source with positive weighted vertex(capacity=weight)
2. connect sink with negitive weighted vertex(capacity=-weight)
3. make capacity of the original edges = inf
4. ans = sum(positive weighted vertex weight) - (max flow)

Minimum Path Cover of DAG
1. For each vertex v, split it to v_in and v_out.
2. For each edge (u->v), add an edge between u_out and v_in
3. |Minimum Path Cover| = |V| - |Maximum Matching| of the new bipartite graph
